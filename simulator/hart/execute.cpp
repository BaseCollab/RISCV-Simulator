/*
 * This file is autogenerated by 'generate.py' script from risc-v.yaml file
 * Do not try to change anything in this file
 ***********************************************************
 * Written by Glaz Roman (Vokerlee)
 */

#include "hart/hart.h"
#include "hart/exception.h"
#include "common/utils/bit_ops.h"
#include "instruction/instruction.h"
#include "instruction/instruction_exec.h"

namespace rvsim {

Exception Hart::DecodeAndExecute(Instruction *instr, instr_size_t raw_instr)
{
    word_t var_bits_0 = bitops::GetBits<6, 0>(raw_instr);
    if (var_bits_0 == 99) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::BEQ;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BEQ: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BEQ(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::BNE;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BNE: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BNE(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::BLT;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BLT: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BLT(this, *instr);
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::BGE;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BGE: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BGE(this, *instr);
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::BLTU;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BLTU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BLTU(this, *instr);
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::BGEU;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "BGEU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::BGEU(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 103) {
        instr->id = InstructionId::JALR;

        instr->attributes.is_branch = true;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        if (instr->rd == 0) {
            instr->rd = SINK_REG_IDX;
        }

        instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
        instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
        std::cerr << "[DEBUG] [DECODE] " << std::hex << "JALR: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

        return iexec::JALR(this, *instr);
    }

    if (var_bits_0 == 111) {
        instr->id = InstructionId::JAL;

        instr->attributes.is_branch = true;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        if (instr->rd == 0) {
            instr->rd = SINK_REG_IDX;
        }

        instr->imm |= (bitops::GetBits<30, 21>(raw_instr)) << 1;
        instr->imm |= (bitops::GetBits<20, 20>(raw_instr)) << 11;
        instr->imm |= (bitops::GetBits<19, 12>(raw_instr)) << 12;
        instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 20;

#ifdef DEBUG_HART
        std::cerr << "[DEBUG] [DECODE] " << std::hex << "JAL: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

        return iexec::JAL(this, *instr);
    }

    if (var_bits_0 == 55) {
        instr->id = InstructionId::LUI;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        if (instr->rd == 0) {
            instr->rd = SINK_REG_IDX;
        }

        instr->imm |= bitops::SignExtend<20, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 12>(raw_instr)) << 12;

#ifdef DEBUG_HART
        std::cerr << "[DEBUG] [DECODE] " << std::hex << "LUI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

        return iexec::LUI(this, *instr);
    }

    if (var_bits_0 == 23) {
        instr->id = InstructionId::AUIPC;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        if (instr->rd == 0) {
            instr->rd = SINK_REG_IDX;
        }

        instr->imm |= bitops::SignExtend<20, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 12>(raw_instr)) << 12;

#ifdef DEBUG_HART
        std::cerr << "[DEBUG] [DECODE] " << std::hex << "AUIPC: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

        return iexec::AUIPC(this, *instr);
    }

    if (var_bits_0 == 19) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::ADDI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "ADDI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::ADDI(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SLLI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLLI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SLLI(this, *instr);
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::SLTI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLTI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SLTI(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::SLTIU;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLTIU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SLTIU(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::XORI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "XORI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::XORI(this, *instr);
        }

        if (var_bits_1 == 5) {
            word_t var_bits_2 = bitops::GetBits<31, 26>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SRLI;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRLI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRLI(this, *instr);
            }

            if (var_bits_2 == 16) {
                instr->id = InstructionId::SRAI;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRAI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRAI(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::ORI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "ORI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::ORI(this, *instr);
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::ANDI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "ANDI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::ANDI(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 51) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::ADD;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "ADD: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::ADD(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::SLL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLL: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SLL(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::SLT;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLT: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SLT(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::SLTU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLTU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SLTU(this, *instr);
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::XOR;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "XOR: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::XOR(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRL: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRL(this, *instr);
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::OR;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "OR: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::OR(this, *instr);
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::AND;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AND: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AND(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SUB;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SUB: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SUB(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRA;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRA: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRA(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::MUL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MUL: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MUL(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::MULH;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MULH: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MULH(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::MULHSU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MULHSU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MULHSU(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::MULHU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MULHU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MULHU(this, *instr);
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::DIV;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "DIV: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::DIV(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::DIVU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "DIVU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::DIVU(this, *instr);
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::REM;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "REM: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::REM(this, *instr);
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::REMU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "REMU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::REMU(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 27) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::ADDIW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "ADDIW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::ADDIW(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SLLIW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLLIW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SLLIW(this, *instr);
        }

        if (var_bits_1 == 5) {
            word_t var_bits_2 = bitops::GetBits<31, 25>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SRLIW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRLIW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRLIW(this, *instr);
            }

            if (var_bits_2 == 32) {
                instr->id = InstructionId::SRAIW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRAIW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRAIW(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 59) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::ADDW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "ADDW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::ADDW(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::SLLW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SLLW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SLLW(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRLW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRLW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRLW(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SUBW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SUBW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SUBW(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRAW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRAW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SRAW(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::MULW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MULW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MULW(this, *instr);
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::DIVW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "DIVW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::DIVW(this, *instr);
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::DIVUW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "DIVUW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::DIVUW(this, *instr);
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::REMW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "REMW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::REMW(this, *instr);
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::REMUW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "REMUW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::REMUW(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 3) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::LB;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LB: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LB(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::LH;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LH: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LH(this, *instr);
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::LW;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LW(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::LD;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LD: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LD(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::LBU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LBU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LBU(this, *instr);
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::LHU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LHU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LHU(this, *instr);
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::LWU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "LWU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::LWU(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 35) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::SB;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SB: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SB(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SH;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SH: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SH(this, *instr);
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::SW;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SW(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::SD;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "SD: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::SD(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 15) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FENCE;

            instr->imm |= bitops::SignExtend<4, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 28>(raw_instr));
            instr->imm |= (bitops::GetBits<27, 24>(raw_instr));
            instr->imm |= (bitops::GetBits<23, 20>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FENCE: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FENCE(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FENCE_I;

            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FENCE_I: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FENCE_I(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 47) {
        word_t var_bits_1 = bitops::GetBits<31, 27>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOADD_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOADD_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOADD_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOADD_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOADD_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOADD_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 4) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOXOR_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOXOR_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOXOR_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOXOR_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOXOR_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOXOR_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 8) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOOR_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOOR_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOOR_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOOR_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOOR_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOOR_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 12) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOAND_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOAND_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOAND_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOAND_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOAND_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOAND_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 16) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMIN_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMIN_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMIN_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMIN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMIN_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMIN_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 20) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMAX_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMAX_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMAX_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMAX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMAX_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMAX_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 24) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMINU_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMINU_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMINU_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMINU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMINU_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMINU_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 28) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMAXU_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMAXU_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMAXU_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMAXU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOMAXU_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOMAXU_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOSWAP_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOSWAP_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOSWAP_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOSWAP_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "AMOSWAP_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::AMOSWAP_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 2) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 2) {
                    instr->id = InstructionId::LR_W;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                    instr->imm |=
                        bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "LR_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::LR_W(this, *instr);
                }

                if (var_bits_3 == 3) {
                    instr->id = InstructionId::LR_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                    instr->imm |=
                        bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "LR_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::LR_D(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 3) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::SC_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SC_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SC_W(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::SC_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SC_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SC_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 115) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<31, 25>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<24, 15>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::ECALL;

                    instr->attributes.is_branch = true;

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "ECALL: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::ECALL(this, *instr);
                }

                if (var_bits_3 == 32) {
                    instr->id = InstructionId::EBREAK;

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "EBREAK: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::EBREAK(this, *instr);
                }

                if (var_bits_3 == 64) {
                    instr->id = InstructionId::URET;

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "URET: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::URET(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            if (var_bits_2 == 8) {
                word_t var_bits_3 = bitops::GetBits<24, 15>(raw_instr);
                if (var_bits_3 == 64) {
                    instr->id = InstructionId::SRET;

                    instr->attributes.mode = Mode::SUPERVISOR_MODE;

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "SRET: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::SRET(this, *instr);
                }

                if (var_bits_3 == 160) {
                    instr->id = InstructionId::WFI;

                    instr->attributes.mode = Mode::MACHINE_MODE;

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "WFI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::WFI(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            if (var_bits_2 == 24) {
                instr->id = InstructionId::MRET;

                instr->attributes.mode = Mode::MACHINE_MODE;

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "MRET: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::MRET(this, *instr);
            }

            if (var_bits_2 == 61) {
                instr->id = InstructionId::DRET;

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "DRET: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::DRET(this, *instr);
            }

            if (var_bits_2 == 9) {
                instr->id = InstructionId::SFENCE_VMA;

                instr->attributes.mode = Mode::SUPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "SFENCE_VMA: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::SFENCE_VMA(this, *instr);
            }

            if (var_bits_2 == 17) {
                instr->id = InstructionId::HFENCE_VVMA;

                instr->attributes.mode = Mode::HYPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "HFENCE_VVMA: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::HFENCE_VVMA(this, *instr);
            }

            if (var_bits_2 == 49) {
                instr->id = InstructionId::HFENCE_GVMA;

                instr->attributes.mode = Mode::HYPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "HFENCE_GVMA: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::HFENCE_GVMA(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::CSRRW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRW(this, *instr);
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::CSRRS;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRS: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRS(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::CSRRC;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRC: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRC(this, *instr);
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::CSRRWI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRWI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRWI(this, *instr);
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::CSRRSI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRSI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRSI(this, *instr);
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::CSRRCI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "CSRRCI: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::CSRRCI(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 83) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FADD_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FADD_S(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSUB_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSUB_S(this, *instr);
        }

        if (var_bits_1 == 8) {
            instr->id = InstructionId::FMUL_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMUL_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMUL_S(this, *instr);
        }

        if (var_bits_1 == 12) {
            instr->id = InstructionId::FDIV_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FDIV_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FDIV_S(this, *instr);
        }

        if (var_bits_1 == 16) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJ_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJ_S(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJN_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJN_S(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJX_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJX_S(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 20) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMIN_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMIN_S(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMAX_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMAX_S(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 44) {
            instr->id = InstructionId::FSQRT_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSQRT_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSQRT_S(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FADD_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FADD_D(this, *instr);
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::FSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSUB_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSUB_D(this, *instr);
        }

        if (var_bits_1 == 9) {
            instr->id = InstructionId::FMUL_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMUL_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMUL_D(this, *instr);
        }

        if (var_bits_1 == 13) {
            instr->id = InstructionId::FDIV_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FDIV_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FDIV_D(this, *instr);
        }

        if (var_bits_1 == 17) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJ_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJ_D(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJN_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJN_D(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJX_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJX_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 21) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMIN_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMIN_D(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMAX_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMAX_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_S_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_D(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_S_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 33) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_D_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_S(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_D_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 45) {
            instr->id = InstructionId::FSQRT_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSQRT_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSQRT_D(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FADD_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FADD_Q(this, *instr);
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::FSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSUB_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSUB_Q(this, *instr);
        }

        if (var_bits_1 == 11) {
            instr->id = InstructionId::FMUL_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMUL_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMUL_Q(this, *instr);
        }

        if (var_bits_1 == 15) {
            instr->id = InstructionId::FDIV_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FDIV_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FDIV_Q(this, *instr);
        }

        if (var_bits_1 == 19) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJ_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJ_Q(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJN_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJN_Q(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSGNJX_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FSGNJX_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 23) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMIN_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMIN_Q(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMAX_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FMAX_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 35) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_Q_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_S(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_Q_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 47) {
            instr->id = InstructionId::FSQRT_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSQRT_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSQRT_Q(this, *instr);
        }

        if (var_bits_1 == 80) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLE_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLE_S(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLT_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLT_S(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FEQ_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FEQ_S(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 81) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLE_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLE_D(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLT_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLT_D(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FEQ_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FEQ_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 83) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLE_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLE_Q(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLT_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FLT_Q(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FEQ_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FEQ_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 96) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_W_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_W_S(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_WU_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_WU_S(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_L_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_L_S(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_LU_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_LU_S(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 112) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_W;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_X_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::FMV_X_W(this, *instr);
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_S;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCLASS_S: 0x" << raw_instr << std::dec
                              << std::endl;
#endif // DEBUG_HART

                    return iexec::FCLASS_S(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 97) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_W_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_W_D(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_WU_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_WU_D(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_L_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_L_D(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_LU_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_LU_D(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 113) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_X_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::FMV_X_D(this, *instr);
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCLASS_D: 0x" << raw_instr << std::dec
                              << std::endl;
#endif // DEBUG_HART

                    return iexec::FCLASS_D(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 99) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_W_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_W_Q(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_WU_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_WU_Q(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_L_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_L_Q(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_LU_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_LU_Q(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 115) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_Q;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_X_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                    return iexec::FMV_X_Q(this, *instr);
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_Q;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    if (instr->rd == 0) {
                        instr->rd = SINK_REG_IDX;
                    }

                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
                    std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCLASS_Q: 0x" << raw_instr << std::dec
                              << std::endl;
#endif // DEBUG_HART

                    return iexec::FCLASS_Q(this, *instr);
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;

                return iexec::INVALID(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 104) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_S_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_W(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_S_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_WU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_WU(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_S_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_L: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_L(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_S_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_S_LU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_S_LU(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 120) {
            instr->id = InstructionId::FMV_W_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_W_X: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMV_W_X(this, *instr);
        }

        if (var_bits_1 == 105) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_D_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_W(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_D_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_WU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_WU(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_D_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_L: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_L(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_D_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_D_LU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_D_LU(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 121) {
            instr->id = InstructionId::FMV_D_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_D_X: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMV_D_X(this, *instr);
        }

        if (var_bits_1 == 107) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_Q_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_W: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_W(this, *instr);
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_Q_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_WU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_WU(this, *instr);
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_Q_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_L: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_L(this, *instr);
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_Q_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                if (instr->rd == 0) {
                    instr->rd = SINK_REG_IDX;
                }

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
                std::cerr << "[DEBUG] [DECODE] " << std::hex << "FCVT_Q_LU: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

                return iexec::FCVT_Q_LU(this, *instr);
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;

            return iexec::INVALID(this, *instr);
        }

        if (var_bits_1 == 123) {
            instr->id = InstructionId::FMV_Q_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMV_Q_X: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMV_Q_X(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 7) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 2) {
            instr->id = InstructionId::FLW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FLW(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FLD;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLD: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FLD(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FLQ;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FLQ: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FLQ(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 39) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 2) {
            instr->id = InstructionId::FSW;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSW: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSW(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FSD;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSD: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSD(this, *instr);
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FSQ;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FSQ: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FSQ(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 67) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FMADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMADD_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMADD_S(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FMADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMADD_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMADD_D(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FMADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMADD_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMADD_Q(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 71) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FMSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMSUB_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMSUB_S(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FMSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMSUB_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMSUB_D(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FMSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FMSUB_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FMSUB_Q(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 75) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FNMSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMSUB_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMSUB_S(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FNMSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMSUB_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMSUB_D(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FNMSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMSUB_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMSUB_Q(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    if (var_bits_0 == 79) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FNMADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMADD_S: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMADD_S(this, *instr);
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FNMADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMADD_D: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMADD_D(this, *instr);
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FNMADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            if (instr->rd == 0) {
                instr->rd = SINK_REG_IDX;
            }

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

#ifdef DEBUG_HART
            std::cerr << "[DEBUG] [DECODE] " << std::hex << "FNMADD_Q: 0x" << raw_instr << std::dec << std::endl;
#endif // DEBUG_HART

            return iexec::FNMADD_Q(this, *instr);
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;

        return iexec::INVALID(this, *instr);
    }

    /* Instruction wasn't found */
    instr->id = InstructionId::INVALID_ID;

    return iexec::INVALID(this, *instr);
}

} // namespace rvsim
