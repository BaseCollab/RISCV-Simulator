/*
 * This file is autogenerated by 'generate.py' script from risc-v.yaml file
 * Do not try to change anything in this file
 ***********************************************************
 * Written by Glaz Roman (Vokerlee)
 */

#include "hart/hart.h"
#include "common/utils/bit_ops.h"
#include "hart/instruction/instruction.h"
#include "hart/instruction/instruction_exec.h"

namespace rvsim {

void Hart::DecodeAndExecute(Instruction *instr, instr_size_t raw_instr)
{
    word_t var_bits_0 = bitops::GetBits<6, 0>(raw_instr);
    if (var_bits_0 == 99) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::BEQ;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BEQ(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::BNE;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BNE(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::BLT;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BLT(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::BGE;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BGE(this, *instr);

            return;
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::BLTU;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BLTU(this, *instr);

            return;
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::BGEU;

            instr->attributes.is_branch = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 8>(raw_instr)) << 1;
            instr->imm |= (bitops::GetBits<30, 25>(raw_instr)) << 5;
            instr->imm |= (bitops::GetBits<7, 7>(raw_instr)) << 11;
            instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 12;

            iexec::BGEU(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 103) {
        instr->id = InstructionId::JALR;

        instr->attributes.is_branch = true;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
        instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

        iexec::JALR(this, *instr);

        return;
    }

    if (var_bits_0 == 111) {
        instr->id = InstructionId::JAL;

        instr->attributes.is_branch = true;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        instr->imm |= (bitops::GetBits<30, 21>(raw_instr)) << 1;
        instr->imm |= (bitops::GetBits<20, 20>(raw_instr)) << 11;
        instr->imm |= (bitops::GetBits<19, 12>(raw_instr)) << 12;
        instr->imm |= bitops::SignExtend<1, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 31>(raw_instr)) << 20;

        iexec::JAL(this, *instr);

        return;
    }

    if (var_bits_0 == 55) {
        instr->id = InstructionId::LUI;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        instr->imm |= bitops::SignExtend<20, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 12>(raw_instr)) << 12;

        iexec::LUI(this, *instr);

        return;
    }

    if (var_bits_0 == 23) {
        instr->id = InstructionId::AUIPC;

        instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
        instr->imm |= bitops::SignExtend<20, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 12>(raw_instr)) << 12;

        iexec::AUIPC(this, *instr);

        return;
    }

    if (var_bits_0 == 19) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::ADDI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::ADDI(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SLLI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::SLLI(this, *instr);

            return;
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::SLTI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::SLTI(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::SLTIU;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::SLTIU(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::XORI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::XORI(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            word_t var_bits_2 = bitops::GetBits<31, 26>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SRLI;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

                iexec::SRLI(this, *instr);

                return;
            }

            if (var_bits_2 == 16) {
                instr->id = InstructionId::SRAI;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

                iexec::SRAI(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::ORI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::ORI(this, *instr);

            return;
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::ANDI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::ANDI(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 51) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::ADD;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::ADD(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::SLL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SLL(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::SLT;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SLT(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::SLTU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SLTU(this, *instr);

                return;
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::XOR;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::XOR(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SRL(this, *instr);

                return;
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::OR;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::OR(this, *instr);

                return;
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::AND;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::AND(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SUB;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SUB(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRA;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SRA(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::MUL;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::MUL(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::MULH;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::MULH(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::MULHSU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::MULHSU(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::MULHU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::MULHU(this, *instr);

                return;
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::DIV;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::DIV(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::DIVU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::DIVU(this, *instr);

                return;
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::REM;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::REM(this, *instr);

                return;
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::REMU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::REMU(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 27) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::ADDIW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::ADDIW(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SLLIW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::SLLIW(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            word_t var_bits_2 = bitops::GetBits<31, 25>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SRLIW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

                iexec::SRLIW(this, *instr);

                return;
            }

            if (var_bits_2 == 32) {
                instr->id = InstructionId::SRAIW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

                iexec::SRAIW(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 59) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::ADDW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::ADDW(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::SLLW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SLLW(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRLW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SRLW(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::SUBW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SUBW(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::SRAW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SRAW(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::MULW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::MULW(this, *instr);

                return;
            }

            if (var_bits_2 == 4) {
                instr->id = InstructionId::DIVW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::DIVW(this, *instr);

                return;
            }

            if (var_bits_2 == 5) {
                instr->id = InstructionId::DIVUW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::DIVUW(this, *instr);

                return;
            }

            if (var_bits_2 == 6) {
                instr->id = InstructionId::REMW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::REMW(this, *instr);

                return;
            }

            if (var_bits_2 == 7) {
                instr->id = InstructionId::REMUW;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::REMUW(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 3) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::LB;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LB(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::LH;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LH(this, *instr);

            return;
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::LW;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LW(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::LD;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LD(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::LBU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LBU(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::LHU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LHU(this, *instr);

            return;
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::LWU;

            instr->attributes.is_load = true;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::LWU(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 35) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::SB;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::SB(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::SH;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::SH(this, *instr);

            return;
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::SW;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::SW(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::SD;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::SD(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 15) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FENCE;

            instr->imm |= bitops::SignExtend<4, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 28>(raw_instr));
            instr->imm |= (bitops::GetBits<27, 24>(raw_instr));
            instr->imm |= (bitops::GetBits<23, 20>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));

            iexec::FENCE(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FENCE_I;

            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));

            iexec::FENCE_I(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 47) {
        word_t var_bits_1 = bitops::GetBits<31, 27>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOADD_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOADD_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOADD_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOADD_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 4) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOXOR_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOXOR_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOXOR_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOXOR_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 8) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOOR_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOOR_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOOR_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOOR_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 12) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOAND_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOAND_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOAND_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOAND_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 16) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMIN_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMIN_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMIN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMIN_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 20) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMAX_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMAX_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMAX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMAX_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 24) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMINU_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMINU_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMINU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMINU_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 28) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOMAXU_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMAXU_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOMAXU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOMAXU_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 1) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::AMOSWAP_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOSWAP_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::AMOSWAP_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::AMOSWAP_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 2) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 2) {
                    instr->id = InstructionId::LR_W;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                    instr->imm |=
                        bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                    iexec::LR_W(this, *instr);

                    return;
                }

                if (var_bits_3 == 3) {
                    instr->id = InstructionId::LR_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                    instr->imm |=
                        bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                    iexec::LR_D(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 3) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 2) {
                instr->id = InstructionId::SC_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::SC_W(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::SC_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
                instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr));

                iexec::SC_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 115) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 0) {
            word_t var_bits_2 = bitops::GetBits<31, 25>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<24, 15>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::ECALL;

                    instr->attributes.is_branch = true;

                    iexec::ECALL(this, *instr);

                    return;
                }

                if (var_bits_3 == 32) {
                    instr->id = InstructionId::EBREAK;

                    iexec::EBREAK(this, *instr);

                    return;
                }

                if (var_bits_3 == 64) {
                    instr->id = InstructionId::URET;

                    iexec::URET(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            if (var_bits_2 == 8) {
                word_t var_bits_3 = bitops::GetBits<24, 15>(raw_instr);
                if (var_bits_3 == 64) {
                    instr->id = InstructionId::SRET;

                    instr->attributes.mode = Mode::SUPERVISOR_MODE;

                    iexec::SRET(this, *instr);

                    return;
                }

                if (var_bits_3 == 160) {
                    instr->id = InstructionId::WFI;

                    instr->attributes.mode = Mode::MACHINE_MODE;

                    iexec::WFI(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            if (var_bits_2 == 24) {
                instr->id = InstructionId::MRET;

                instr->attributes.mode = Mode::MACHINE_MODE;

                iexec::MRET(this, *instr);

                return;
            }

            if (var_bits_2 == 61) {
                instr->id = InstructionId::DRET;

                iexec::DRET(this, *instr);

                return;
            }

            if (var_bits_2 == 9) {
                instr->id = InstructionId::SFENCE_VMA;

                instr->attributes.mode = Mode::SUPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::SFENCE_VMA(this, *instr);

                return;
            }

            if (var_bits_2 == 17) {
                instr->id = InstructionId::HFENCE_VVMA;

                instr->attributes.mode = Mode::HYPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::HFENCE_VVMA(this, *instr);

                return;
            }

            if (var_bits_2 == 49) {
                instr->id = InstructionId::HFENCE_GVMA;

                instr->attributes.mode = Mode::HYPERVISOR_MODE;

                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::HFENCE_GVMA(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::CSRRW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRW(this, *instr);

            return;
        }

        if (var_bits_1 == 2) {
            instr->id = InstructionId::CSRRS;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRS(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::CSRRC;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRC(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::CSRRWI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRWI(this, *instr);

            return;
        }

        if (var_bits_1 == 6) {
            instr->id = InstructionId::CSRRSI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRSI(this, *instr);

            return;
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::CSRRCI;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::CSRRCI(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 83) {
        word_t var_bits_1 = bitops::GetBits<31, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FADD_S(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSUB_S(this, *instr);

            return;
        }

        if (var_bits_1 == 8) {
            instr->id = InstructionId::FMUL_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMUL_S(this, *instr);

            return;
        }

        if (var_bits_1 == 12) {
            instr->id = InstructionId::FDIV_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FDIV_S(this, *instr);

            return;
        }

        if (var_bits_1 == 16) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJ_S(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJN_S(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJX_S(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 20) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMIN_S(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMAX_S(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 44) {
            instr->id = InstructionId::FSQRT_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSQRT_S(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FADD_D(this, *instr);

            return;
        }

        if (var_bits_1 == 5) {
            instr->id = InstructionId::FSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSUB_D(this, *instr);

            return;
        }

        if (var_bits_1 == 9) {
            instr->id = InstructionId::FMUL_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMUL_D(this, *instr);

            return;
        }

        if (var_bits_1 == 13) {
            instr->id = InstructionId::FDIV_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FDIV_D(this, *instr);

            return;
        }

        if (var_bits_1 == 17) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJ_D(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJN_D(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJX_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 21) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMIN_D(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMAX_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 32) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_S_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_D(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_S_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 33) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_D_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_S(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_D_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 45) {
            instr->id = InstructionId::FSQRT_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSQRT_D(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FADD_Q(this, *instr);

            return;
        }

        if (var_bits_1 == 7) {
            instr->id = InstructionId::FSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSUB_Q(this, *instr);

            return;
        }

        if (var_bits_1 == 11) {
            instr->id = InstructionId::FMUL_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMUL_Q(this, *instr);

            return;
        }

        if (var_bits_1 == 15) {
            instr->id = InstructionId::FDIV_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FDIV_Q(this, *instr);

            return;
        }

        if (var_bits_1 == 19) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FSGNJ_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJ_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FSGNJN_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJN_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FSGNJX_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FSGNJX_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 23) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FMIN_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMIN_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FMAX_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FMAX_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 35) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_Q_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_S(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_Q_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 47) {
            instr->id = InstructionId::FSQRT_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FSQRT_Q(this, *instr);

            return;
        }

        if (var_bits_1 == 80) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLE_S(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLT_S(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FEQ_S(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 81) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLE_D(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLT_D(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FEQ_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 83) {
            word_t var_bits_2 = bitops::GetBits<14, 12>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FLE_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLE_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FLT_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FLT_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FEQ_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));

                iexec::FEQ_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 96) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_W_S(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_WU_S(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_L_S(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_S;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_LU_S(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 112) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_W;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FMV_X_W(this, *instr);

                    return;
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_S;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FCLASS_S(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 97) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_W_D(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_WU_D(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_L_D(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_D;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_LU_D(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 113) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FMV_X_D(this, *instr);

                    return;
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_D;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FCLASS_D(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 99) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_W_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_W_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_WU_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_WU_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_L_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_L_Q(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_LU_Q;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_LU_Q(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 115) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                word_t var_bits_3 = bitops::GetBits<14, 12>(raw_instr);
                if (var_bits_3 == 0) {
                    instr->id = InstructionId::FMV_X_Q;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FMV_X_Q(this, *instr);

                    return;
                }

                if (var_bits_3 == 1) {
                    instr->id = InstructionId::FCLASS_Q;

                    instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                    instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

                    iexec::FCLASS_Q(this, *instr);

                    return;
                }

                /* Instruction wasn't found */
                instr->id = InstructionId::INVALID_ID;
                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 104) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_S_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_W(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_S_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_WU(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_S_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_L(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_S_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_S_LU(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 120) {
            instr->id = InstructionId::FMV_W_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

            iexec::FMV_W_X(this, *instr);

            return;
        }

        if (var_bits_1 == 105) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_D_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_W(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_D_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_WU(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_D_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_L(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_D_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_D_LU(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 121) {
            instr->id = InstructionId::FMV_D_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

            iexec::FMV_D_X(this, *instr);

            return;
        }

        if (var_bits_1 == 107) {
            word_t var_bits_2 = bitops::GetBits<24, 20>(raw_instr);
            if (var_bits_2 == 0) {
                instr->id = InstructionId::FCVT_Q_W;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_W(this, *instr);

                return;
            }

            if (var_bits_2 == 1) {
                instr->id = InstructionId::FCVT_Q_WU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_WU(this, *instr);

                return;
            }

            if (var_bits_2 == 2) {
                instr->id = InstructionId::FCVT_Q_L;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_L(this, *instr);

                return;
            }

            if (var_bits_2 == 3) {
                instr->id = InstructionId::FCVT_Q_LU;

                instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
                instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
                instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

                iexec::FCVT_Q_LU(this, *instr);

                return;
            }

            /* Instruction wasn't found */
            instr->id = InstructionId::INVALID_ID;
            return;
        }

        if (var_bits_1 == 123) {
            instr->id = InstructionId::FMV_Q_X;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));

            iexec::FMV_Q_X(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 7) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 2) {
            instr->id = InstructionId::FLW;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::FLW(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FLD;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::FLD(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FLQ;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->imm |= bitops::SignExtend<12, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 20>(raw_instr));

            iexec::FLQ(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 39) {
        word_t var_bits_1 = bitops::GetBits<14, 12>(raw_instr);
        if (var_bits_1 == 2) {
            instr->id = InstructionId::FSW;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::FSW(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FSD;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::FSD(this, *instr);

            return;
        }

        if (var_bits_1 == 4) {
            instr->id = InstructionId::FSQ;

            instr->attributes.is_store = true;

            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->imm |= (bitops::GetBits<11, 7>(raw_instr));
            instr->imm |= bitops::SignExtend<7, bitops::BitSizeof<word_t>()>(bitops::GetBits<31, 25>(raw_instr)) << 5;

            iexec::FSQ(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 67) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FMADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMADD_S(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FMADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMADD_D(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FMADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMADD_Q(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 71) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FMSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMSUB_S(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FMSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMSUB_D(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FMSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FMSUB_Q(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 75) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FNMSUB_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMSUB_S(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FNMSUB_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMSUB_D(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FNMSUB_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMSUB_Q(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    if (var_bits_0 == 79) {
        word_t var_bits_1 = bitops::GetBits<26, 25>(raw_instr);
        if (var_bits_1 == 0) {
            instr->id = InstructionId::FNMADD_S;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMADD_S(this, *instr);

            return;
        }

        if (var_bits_1 == 1) {
            instr->id = InstructionId::FNMADD_D;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMADD_D(this, *instr);

            return;
        }

        if (var_bits_1 == 3) {
            instr->id = InstructionId::FNMADD_Q;

            instr->rd |= (bitops::GetBits<11, 7>(raw_instr));
            instr->rs1 |= (bitops::GetBits<19, 15>(raw_instr));
            instr->rs2 |= (bitops::GetBits<24, 20>(raw_instr));
            instr->rs3 |= (bitops::GetBits<31, 27>(raw_instr));
            instr->rm |= (bitops::GetBits<14, 12>(raw_instr));

            iexec::FNMADD_Q(this, *instr);

            return;
        }

        /* Instruction wasn't found */
        instr->id = InstructionId::INVALID_ID;
        return;
    }

    /* Instruction wasn't found */
    instr->id = InstructionId::INVALID_ID;
    return;
}

} // namespace rvsim
