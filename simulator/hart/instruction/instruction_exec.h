/*
 * This file is autogenerated by 'generate.py' script from risc-v.yaml file
 * Do not try to change anything in this file
 ***********************************************************
 * Written by Glaz Roman (Vokerlee)
 */

#ifndef SIMULATOR_INSTRUCTION_EXEC_INSTRUCTION_EXEC_H
#define SIMULATOR_INSTRUCTION_EXEC_INSTRUCTION_EXEC_H

#include "hart/hart.h"
#include "instruction.h"

namespace rvsim {
namespace iexec {

// clang-format off

void BEQ        (Hart *hart, const Instruction &instr);
void BNE        (Hart *hart, const Instruction &instr);
void BLT        (Hart *hart, const Instruction &instr);
void BGE        (Hart *hart, const Instruction &instr);
void BLTU       (Hart *hart, const Instruction &instr);
void BGEU       (Hart *hart, const Instruction &instr);
void JALR       (Hart *hart, const Instruction &instr);
void JAL        (Hart *hart, const Instruction &instr);
void LUI        (Hart *hart, const Instruction &instr);
void AUIPC      (Hart *hart, const Instruction &instr);
void ADDI       (Hart *hart, const Instruction &instr);
void SLLI       (Hart *hart, const Instruction &instr);
void SLTI       (Hart *hart, const Instruction &instr);
void SLTIU      (Hart *hart, const Instruction &instr);
void XORI       (Hart *hart, const Instruction &instr);
void SRLI       (Hart *hart, const Instruction &instr);
void SRAI       (Hart *hart, const Instruction &instr);
void ORI        (Hart *hart, const Instruction &instr);
void ANDI       (Hart *hart, const Instruction &instr);
void ADD        (Hart *hart, const Instruction &instr);
void SUB        (Hart *hart, const Instruction &instr);
void SLL        (Hart *hart, const Instruction &instr);
void SLT        (Hart *hart, const Instruction &instr);
void SLTU       (Hart *hart, const Instruction &instr);
void XOR        (Hart *hart, const Instruction &instr);
void SRL        (Hart *hart, const Instruction &instr);
void SRA        (Hart *hart, const Instruction &instr);
void OR         (Hart *hart, const Instruction &instr);
void AND        (Hart *hart, const Instruction &instr);
void ADDIW      (Hart *hart, const Instruction &instr);
void SLLIW      (Hart *hart, const Instruction &instr);
void SRLIW      (Hart *hart, const Instruction &instr);
void SRAIW      (Hart *hart, const Instruction &instr);
void ADDW       (Hart *hart, const Instruction &instr);
void SUBW       (Hart *hart, const Instruction &instr);
void SLLW       (Hart *hart, const Instruction &instr);
void SRLW       (Hart *hart, const Instruction &instr);
void SRAW       (Hart *hart, const Instruction &instr);
void LB         (Hart *hart, const Instruction &instr);
void LH         (Hart *hart, const Instruction &instr);
void LW         (Hart *hart, const Instruction &instr);
void LD         (Hart *hart, const Instruction &instr);
void LBU        (Hart *hart, const Instruction &instr);
void LHU        (Hart *hart, const Instruction &instr);
void LWU        (Hart *hart, const Instruction &instr);
void SB         (Hart *hart, const Instruction &instr);
void SH         (Hart *hart, const Instruction &instr);
void SW         (Hart *hart, const Instruction &instr);
void SD         (Hart *hart, const Instruction &instr);
void FENCE      (Hart *hart, const Instruction &instr);
void FENCE_I    (Hart *hart, const Instruction &instr);
void MUL        (Hart *hart, const Instruction &instr);
void MULH       (Hart *hart, const Instruction &instr);
void MULHSU     (Hart *hart, const Instruction &instr);
void MULHU      (Hart *hart, const Instruction &instr);
void DIV        (Hart *hart, const Instruction &instr);
void DIVU       (Hart *hart, const Instruction &instr);
void REM        (Hart *hart, const Instruction &instr);
void REMU       (Hart *hart, const Instruction &instr);
void MULW       (Hart *hart, const Instruction &instr);
void DIVW       (Hart *hart, const Instruction &instr);
void DIVUW      (Hart *hart, const Instruction &instr);
void REMW       (Hart *hart, const Instruction &instr);
void REMUW      (Hart *hart, const Instruction &instr);
void AMOADD_W   (Hart *hart, const Instruction &instr);
void AMOXOR_W   (Hart *hart, const Instruction &instr);
void AMOOR_W    (Hart *hart, const Instruction &instr);
void AMOAND_W   (Hart *hart, const Instruction &instr);
void AMOMIN_W   (Hart *hart, const Instruction &instr);
void AMOMAX_W   (Hart *hart, const Instruction &instr);
void AMOMINU_W  (Hart *hart, const Instruction &instr);
void AMOMAXU_W  (Hart *hart, const Instruction &instr);
void AMOSWAP_W  (Hart *hart, const Instruction &instr);
void LR_W       (Hart *hart, const Instruction &instr);
void SC_W       (Hart *hart, const Instruction &instr);
void AMOADD_D   (Hart *hart, const Instruction &instr);
void AMOXOR_D   (Hart *hart, const Instruction &instr);
void AMOOR_D    (Hart *hart, const Instruction &instr);
void AMOAND_D   (Hart *hart, const Instruction &instr);
void AMOMIN_D   (Hart *hart, const Instruction &instr);
void AMOMAX_D   (Hart *hart, const Instruction &instr);
void AMOMINU_D  (Hart *hart, const Instruction &instr);
void AMOMAXU_D  (Hart *hart, const Instruction &instr);
void AMOSWAP_D  (Hart *hart, const Instruction &instr);
void LR_D       (Hart *hart, const Instruction &instr);
void SC_D       (Hart *hart, const Instruction &instr);
void ECALL      (Hart *hart, const Instruction &instr);
void EBREAK     (Hart *hart, const Instruction &instr);
void URET       (Hart *hart, const Instruction &instr);
void SRET       (Hart *hart, const Instruction &instr);
void MRET       (Hart *hart, const Instruction &instr);
void DRET       (Hart *hart, const Instruction &instr);
void SFENCE_VMA (Hart *hart, const Instruction &instr);
void WFI        (Hart *hart, const Instruction &instr);
void CSRRW      (Hart *hart, const Instruction &instr);
void CSRRS      (Hart *hart, const Instruction &instr);
void CSRRC      (Hart *hart, const Instruction &instr);
void CSRRWI     (Hart *hart, const Instruction &instr);
void CSRRSI     (Hart *hart, const Instruction &instr);
void CSRRCI     (Hart *hart, const Instruction &instr);
void HFENCE_VVMA(Hart *hart, const Instruction &instr);
void HFENCE_GVMA(Hart *hart, const Instruction &instr);
void FADD_S     (Hart *hart, const Instruction &instr);
void FSUB_S     (Hart *hart, const Instruction &instr);
void FMUL_S     (Hart *hart, const Instruction &instr);
void FDIV_S     (Hart *hart, const Instruction &instr);
void FSGNJ_S    (Hart *hart, const Instruction &instr);
void FSGNJN_S   (Hart *hart, const Instruction &instr);
void FSGNJX_S   (Hart *hart, const Instruction &instr);
void FMIN_S     (Hart *hart, const Instruction &instr);
void FMAX_S     (Hart *hart, const Instruction &instr);
void FSQRT_S    (Hart *hart, const Instruction &instr);
void FADD_D     (Hart *hart, const Instruction &instr);
void FSUB_D     (Hart *hart, const Instruction &instr);
void FMUL_D     (Hart *hart, const Instruction &instr);
void FDIV_D     (Hart *hart, const Instruction &instr);
void FSGNJ_D    (Hart *hart, const Instruction &instr);
void FSGNJN_D   (Hart *hart, const Instruction &instr);
void FSGNJX_D   (Hart *hart, const Instruction &instr);
void FMIN_D     (Hart *hart, const Instruction &instr);
void FMAX_D     (Hart *hart, const Instruction &instr);
void FCVT_S_D   (Hart *hart, const Instruction &instr);
void FCVT_D_S   (Hart *hart, const Instruction &instr);
void FSQRT_D    (Hart *hart, const Instruction &instr);
void FADD_Q     (Hart *hart, const Instruction &instr);
void FSUB_Q     (Hart *hart, const Instruction &instr);
void FMUL_Q     (Hart *hart, const Instruction &instr);
void FDIV_Q     (Hart *hart, const Instruction &instr);
void FSGNJ_Q    (Hart *hart, const Instruction &instr);
void FSGNJN_Q   (Hart *hart, const Instruction &instr);
void FSGNJX_Q   (Hart *hart, const Instruction &instr);
void FMIN_Q     (Hart *hart, const Instruction &instr);
void FMAX_Q     (Hart *hart, const Instruction &instr);
void FCVT_S_Q   (Hart *hart, const Instruction &instr);
void FCVT_Q_S   (Hart *hart, const Instruction &instr);
void FCVT_D_Q   (Hart *hart, const Instruction &instr);
void FCVT_Q_D   (Hart *hart, const Instruction &instr);
void FSQRT_Q    (Hart *hart, const Instruction &instr);
void FLE_S      (Hart *hart, const Instruction &instr);
void FLT_S      (Hart *hart, const Instruction &instr);
void FEQ_S      (Hart *hart, const Instruction &instr);
void FLE_D      (Hart *hart, const Instruction &instr);
void FLT_D      (Hart *hart, const Instruction &instr);
void FEQ_D      (Hart *hart, const Instruction &instr);
void FLE_Q      (Hart *hart, const Instruction &instr);
void FLT_Q      (Hart *hart, const Instruction &instr);
void FEQ_Q      (Hart *hart, const Instruction &instr);
void FCVT_W_S   (Hart *hart, const Instruction &instr);
void FCVT_WU_S  (Hart *hart, const Instruction &instr);
void FCVT_L_S   (Hart *hart, const Instruction &instr);
void FCVT_LU_S  (Hart *hart, const Instruction &instr);
void FMV_X_W    (Hart *hart, const Instruction &instr);
void FCLASS_S   (Hart *hart, const Instruction &instr);
void FCVT_W_D   (Hart *hart, const Instruction &instr);
void FCVT_WU_D  (Hart *hart, const Instruction &instr);
void FCVT_L_D   (Hart *hart, const Instruction &instr);
void FCVT_LU_D  (Hart *hart, const Instruction &instr);
void FMV_X_D    (Hart *hart, const Instruction &instr);
void FCLASS_D   (Hart *hart, const Instruction &instr);
void FCVT_W_Q   (Hart *hart, const Instruction &instr);
void FCVT_WU_Q  (Hart *hart, const Instruction &instr);
void FCVT_L_Q   (Hart *hart, const Instruction &instr);
void FCVT_LU_Q  (Hart *hart, const Instruction &instr);
void FMV_X_Q    (Hart *hart, const Instruction &instr);
void FCLASS_Q   (Hart *hart, const Instruction &instr);
void FCVT_S_W   (Hart *hart, const Instruction &instr);
void FCVT_S_WU  (Hart *hart, const Instruction &instr);
void FCVT_S_L   (Hart *hart, const Instruction &instr);
void FCVT_S_LU  (Hart *hart, const Instruction &instr);
void FMV_W_X    (Hart *hart, const Instruction &instr);
void FCVT_D_W   (Hart *hart, const Instruction &instr);
void FCVT_D_WU  (Hart *hart, const Instruction &instr);
void FCVT_D_L   (Hart *hart, const Instruction &instr);
void FCVT_D_LU  (Hart *hart, const Instruction &instr);
void FMV_D_X    (Hart *hart, const Instruction &instr);
void FCVT_Q_W   (Hart *hart, const Instruction &instr);
void FCVT_Q_WU  (Hart *hart, const Instruction &instr);
void FCVT_Q_L   (Hart *hart, const Instruction &instr);
void FCVT_Q_LU  (Hart *hart, const Instruction &instr);
void FMV_Q_X    (Hart *hart, const Instruction &instr);
void FLW        (Hart *hart, const Instruction &instr);
void FLD        (Hart *hart, const Instruction &instr);
void FLQ        (Hart *hart, const Instruction &instr);
void FSW        (Hart *hart, const Instruction &instr);
void FSD        (Hart *hart, const Instruction &instr);
void FSQ        (Hart *hart, const Instruction &instr);
void FMADD_S    (Hart *hart, const Instruction &instr);
void FMSUB_S    (Hart *hart, const Instruction &instr);
void FNMSUB_S   (Hart *hart, const Instruction &instr);
void FNMADD_S   (Hart *hart, const Instruction &instr);
void FMADD_D    (Hart *hart, const Instruction &instr);
void FMSUB_D    (Hart *hart, const Instruction &instr);
void FNMSUB_D   (Hart *hart, const Instruction &instr);
void FNMADD_D   (Hart *hart, const Instruction &instr);
void FMADD_Q    (Hart *hart, const Instruction &instr);
void FMSUB_Q    (Hart *hart, const Instruction &instr);
void FNMSUB_Q   (Hart *hart, const Instruction &instr);
void FNMADD_Q   (Hart *hart, const Instruction &instr);

// clang-format on

} // namespace iexec
} // namespace rvsim

#endif // SIMULATOR_INSTRUCTION_EXEC_INSTRUCTION_EXEC_H
