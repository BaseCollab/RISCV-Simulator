#!/usr/bin/env python3

import yaml
import sys

comment_string = "/*\n"                                                                             \
                 " * This file is autogenerated by 'generate.py' script from risc-v.yaml file\n"    \
                 " * Do not try to change anything in this file\n"                                  \
                 " ***********************************************************\n"                   \
                 " * Written by Glaz Roman (Vokerlee)\n"                                            \
                 "*/\n\n"

def generate_id_enum(cmd_list):
    with open('instruction_id.h', 'w') as fout:
        fout.write(comment_string)
        fout.write('enum class InsnId\n'
                   '{\n')

        max_cmd_len = max([len(cmd) for cmd in cmd_list])

        fout.write('    INVALID_ID' + ' ' * (max_cmd_len - len('INVALID_ID')) + ' = -1,\n')

        for i in range(len(cmd_list)):
            fout.write(f'    {cmd_list[i]}' + ' ' * (max_cmd_len - len(cmd_list[i])) + \
                       ' = ' + str(i + 1) + ',\n')

        fout.write('};\n')

def main():
    if len(sys.argv) != 2:
        print('Invalid amount of arguments [1 must be used]',        file=sys.stderr)
        print('Usage example: ' + sys.argv[0] + ' ' + 'risc-v.yaml', file=sys.stderr)

    with open(sys.argv[1], 'r') as cmd_file:
        commands = yaml.safe_load(cmd_file)

    commands = commands['instructions']

    cmd_list = []
    for cmd in commands:
        cmd_list.append(cmd['mnemonic'].upper().replace('.', '_'))

    cmd_list.append('PSEUDO') # pseudo cmd for plugin implementation

    generate_id_enum(cmd_list)

    # cmd_hpp(cmd_list)
    # cmd_cpp(cmd_list)
    # ops_cpp(cmd_list)

if __name__ == '__main__':
    main()
