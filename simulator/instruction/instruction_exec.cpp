/*
 * This file is autogenerated by 'generate.py' script from risc-v.yaml file
 * This file can be changed without additional autogeneration
 ***********************************************************
 * Written by Glaz Roman (Vokerlee)
*/

#include "instruction_exec.h"

namespace rvsim {

void exec_BEQ(Hart &hart, const Instruction &instr)
{
    if (hart.GetGPR(instr.GetRS1()) == hart.GetGPR(instr.GetRS2()))
        hart.SetPCTarget(hart.GetPC() + instr.GetIMM());
    else
        hart.SetPCTarget(hart.GetPC() + sizeof(instr_size_t));
}

void exec_BNE(Hart &hart, const Instruction &instr)
{
    if (hart.GetGPR(instr.GetRS1()) != hart.GetGPR(instr.GetRS2()))
        hart.SetPCTarget(hart.GetPC() + instr.GetIMM());
    else
        hart.SetPCTarget(hart.GetPC() + sizeof(instr_size_t));
}

void exec_BLT(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_BLT(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_BGE(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_BGE(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_BLTU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_BLTU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_BGEU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_BGEU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_JALR(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_JALR(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_JAL(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_JAL(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LUI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LUI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AUIPC(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AUIPC(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ADDI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ADDI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLLI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLLI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLTI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLTI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLTIU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLTIU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_XORI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_XORI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRLI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRLI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRAI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRAI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ORI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ORI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ANDI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ANDI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ADD(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ADD(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SUB(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SUB(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLL(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLL(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLT(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLT(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLTU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLTU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_XOR(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_XOR(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRL(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRL(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRA(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRA(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_OR(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_OR(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AND(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AND(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ADDIW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ADDIW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLLIW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLLIW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRLIW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRLIW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRAIW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRAIW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ADDW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ADDW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SUBW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SUBW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SLLW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SLLW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRLW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRLW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRAW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRAW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LB(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LB(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LH(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LH(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LD(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LD(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LBU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LBU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LHU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LHU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LWU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LWU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SB(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SB(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SH(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SH(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SD(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SD(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FENCE(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FENCE(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FENCE_I(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FENCE_I(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MUL(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MUL(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MULH(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MULH(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MULHSU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MULHSU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MULHU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MULHU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_DIV(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_DIV(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_DIVU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_DIVU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_REM(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_REM(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_REMU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_REMU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MULW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MULW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_DIVW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_DIVW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_DIVUW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_DIVUW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_REMW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_REMW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_REMUW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_REMUW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOADD_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOADD_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOXOR_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOXOR_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOOR_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOOR_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOAND_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOAND_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMIN_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMIN_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMAX_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMAX_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMINU_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMINU_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMAXU_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMAXU_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOSWAP_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOSWAP_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LR_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LR_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SC_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SC_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOADD_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOADD_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOXOR_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOXOR_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOOR_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOOR_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOAND_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOAND_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMIN_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMIN_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMAX_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMAX_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMINU_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMINU_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOMAXU_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOMAXU_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_AMOSWAP_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_AMOSWAP_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_LR_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_LR_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SC_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SC_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_ECALL(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_ECALL(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_EBREAK(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_EBREAK(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_URET(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_URET(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SRET(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SRET(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_MRET(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_MRET(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_DRET(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_DRET(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_SFENCE_VMA(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_SFENCE_VMA(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_WFI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_WFI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRS(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRS(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRC(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRC(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRWI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRWI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRSI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRSI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_CSRRCI(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_CSRRCI(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_HFENCE_VVMA(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_HFENCE_VVMA(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_HFENCE_GVMA(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_HFENCE_GVMA(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FADD_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FADD_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSUB_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSUB_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMUL_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMUL_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FDIV_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FDIV_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJ_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJ_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJN_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJN_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJX_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJX_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMIN_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMIN_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMAX_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMAX_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSQRT_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSQRT_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FADD_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FADD_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSUB_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSUB_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMUL_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMUL_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FDIV_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FDIV_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJ_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJ_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJN_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJN_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJX_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJX_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMIN_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMIN_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMAX_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMAX_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSQRT_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSQRT_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FADD_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FADD_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSUB_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSUB_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMUL_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMUL_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FDIV_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FDIV_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJ_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJ_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJN_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJN_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSGNJX_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSGNJX_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMIN_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMIN_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMAX_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMAX_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSQRT_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSQRT_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLE_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLE_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLT_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLT_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FEQ_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FEQ_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLE_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLE_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLT_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLT_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FEQ_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FEQ_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLE_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLE_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLT_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLT_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FEQ_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FEQ_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_W_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_W_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_WU_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_WU_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_L_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_L_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_LU_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_LU_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_X_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_X_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCLASS_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCLASS_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_W_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_W_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_WU_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_WU_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_L_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_L_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_LU_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_LU_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_X_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_X_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCLASS_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCLASS_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_W_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_W_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_WU_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_WU_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_L_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_L_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_LU_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_LU_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_X_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_X_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCLASS_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCLASS_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_WU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_WU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_L(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_L(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_S_LU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_S_LU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_W_X(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_W_X(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_WU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_WU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_L(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_L(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_D_LU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_D_LU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_D_X(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_D_X(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_W(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_W(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_WU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_WU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_L(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_L(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FCVT_Q_LU(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FCVT_Q_LU(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMV_Q_X(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMV_Q_X(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLD(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLD(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FLQ(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FLQ(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSW(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSW(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSD(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSD(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FSQ(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FSQ(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMADD_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMADD_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMSUB_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMSUB_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMSUB_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMSUB_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMADD_S(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMADD_S(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMADD_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMADD_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMSUB_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMSUB_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMSUB_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMSUB_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMADD_D(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMADD_D(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMADD_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMADD_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FMSUB_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FMSUB_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMSUB_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMSUB_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}

void exec_FNMADD_Q(Hart &hart, const Instruction &instr)
{
    std::cerr << "function exec_FNMADD_Q(Hart &hart, const Instruction &instr) is not implemented yet!" << std::endl;
}


} // namespace rvsim

